<?php

namespace App\Controllers;

use App\Models\ArticleModel;
use App\Models\AIArticle;
use App\Models\TopicModel;

class Articles extends BaseController
{
    /*
     * Home page where you can see a list of autogenerated topics to start browsing.
     */
    private ArticleModel $articleModel;
    private TopicModel $topicModel;
    public function __construct()
    {
        $this->articleModel = new ArticleModel();
        $this->topicModel = new TopicModel();
    }
    public function index(): string
    {
        $topicsArray = $this->topicModel->getTopicsArray();
        helper('form');
        $page = view('header', ['title' => 'Select a category as a start point to infinite browsing!']);
        $page .= view('topics', [ 'categories' => $topicsArray]);
        $page .= view('paste_new');
        $page .= view('footer');
        return $page;
    }

    public function generateFromURL()
    {
        $article = Content::generateFromURL($this->request->getPost('article-url'));

        Content::generateGlossaryOfTerms($article);
        Content::generateInterestingFacts($article);
        Content::generateFurtherReads($article);
        return view('header', ['article' => $article]) .
            view('article_content') .
            view('article_glossary') .
            view('article_interesting_facts') .
            view('article_further_readings') .
            view('footer');
    }
    public function generateFromNewsArticle()
    {
        $article = Content::copyWriteArticle($this->request->getPost('article-content'));
        Content::classifyArticle($article, $this->topicModel);
        Content::generateGlossaryOfTerms($article);
        Content::generateInterestingFacts($article);
        Content::generateFurtherReads($article);
        return view('header', ['article' => $article]) .
            view('article_content') .
            view('article_glossary') .
            view('article_interesting_facts') .
            view('article_further_readings') .
            view('footer');
    }

    public function fromTopic(string $topic): string
    {
        $articleList = Content::generateFromTopic($topic);

        $page = view('header', [ 'topic' => $topic]);
        $page .= view('topic_articles', [
            'topic' => $topic,
            'articles' => $articleList,
        ]);
        $page .= view('footer');
        return $page;
    }


    public function nextArticle(string $sourceSlug, string $targetSlug): string
    {
        $article = new AIArticle($targetSlug, $sourceSlug);
        Content::generateArticleContent($article);
        Content::generateGlossaryOfTerms($article);
        Content::generateInterestingFacts($article);
        Content::generateFurtherReads($article);
        return view('header', ['article' => $article]) .
            view('article_content') .
            view('article_glossary') .
            view('article_interesting_facts') .
            view('article_further_readings') .
            view('footer');
    }

    /*
     *  This functions returns a view with the article "skeleton" to display
     *  while the content is generated and received via AJAX requests
     */

    public function nextArticleTemplate(string $sourceSlug, string $targetSlug): string
    {
        $sourceSlug = preg_replace('/[^a-z^0-9]/', '-', $sourceSlug);
        $targetSlug = preg_replace('/[^a-z^0-9]/', '-', $targetSlug);
        $slugs = [
            'source_slug' => $sourceSlug,
            'target_slug' => $targetSlug,
        ];
        return view('header', [
            'slugs' => $slugs]
            ) .
            view('article_skeleton') .
            view('footer');
    }

    /*
     * This functions returns a JSON object containing the title and content of the article
     * to be used in an AJAX request.
     */
    public function getTitleAndContentParagraphs(string $sourceSlug, string $targetSlug): string
    {
        $article = new AIArticle($targetSlug, $sourceSlug);
        Content::generateArticleContent($article);

        return json_encode([
            'title' => $article->getTitle(),
            'contentParagraphs' => $article->getContentParagraphs(),
        ]);
    }
    public function getGlossary(): string
    {
        $contentParagraphs = $this->request->getPost('content_paragraphs');
        $title = $this->request->getPost('title');
        $sourceSlug = $this->request->getPost('source_slug');
        $targetSlug = $this->request->getPost('target_slug');

        $article = new AIArticle($targetSlug, $sourceSlug);
        $article->setContentParagraphs($contentParagraphs);
        $article->setTitle($title);

        Content::generateGlossaryOfTerms($article);
        return json_encode([
            'title' => $title,
            'content_paragraphs' => $contentParagraphs,
            'source_slug' => $sourceSlug,
            'target_slug' => $targetSlug,
            'glossary' => $article->getGlossaryOfTerms(),
        ]);
    }
    public function getInterestingFacts(): string
    {
        $contentParagraphs = $this->request->getPost('content_paragraphs');
        $title = $this->request->getPost('title');
        $sourceSlug = $this->request->getPost('source_slug');
        $targetSlug = $this->request->getPost('target_slug');

        $article = new AIArticle($targetSlug, $sourceSlug);
        $article->setContentParagraphs($contentParagraphs);
        $article->setTitle($title);

        Content::generateInterestingFacts($article);
        return json_encode([
            'title' => $title,
            'content_paragraphs' => $contentParagraphs,
            'source_slug' => $sourceSlug,
            'target_slug' => $targetSlug,
            'facts' => $article->getDidYouKnowFacts(),
        ]);
    }
    public function getFurtherReads(): string
    {
        $contentParagraphs = $this->request->getPost('content_paragraphs');
        $title = $this->request->getPost('title');
        $sourceSlug = $this->request->getPost('source_slug');
        $targetSlug = $this->request->getPost('target_slug');

        $article = new AIArticle($targetSlug, $sourceSlug);
        $article->setContentParagraphs($contentParagraphs);
        $article->setTitle($title);

        Content::generateFurtherReads($article);
        return json_encode([
            'title' => $title,
            'content_paragraphs' => $contentParagraphs,
            'source_slug' => $sourceSlug,
            'target_slug' => $targetSlug,
            'further_readings' => $article->getFurtherReadings(),
        ]);
    }
}